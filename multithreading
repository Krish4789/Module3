#include <iostream> 
#include <cstdlib> 
#include <ctime> 
#include <vector> 
#include <fstream> 
#include <pthread.h> 

using namespace std; 

#define N 4096       // Size of the matrix 
#define NUM_THREADS 8   // Number of threads to use  

// Structure to pass data to threads 
struct ThreadArgs { 
    const vector<vector<int>>* A;       // Pointer to matrix A 
    const vector<vector<int>>* B;       // Pointer to matrix B 
    vector<vector<int>>* C;             // Pointer to matrix C 
    int startRow;                       // Starting row for this thread 
    int endRow;                         // Ending row for this thread 
}; 

// Function for each thread to compute a portion of the matrix 
void* multiply(void* arg)  
{ 
    // Casting the argument to ThreadArgs* to access the data (matrices and row ranges) that was passed to the thread  
    ThreadArgs* args = (ThreadArgs*)arg; 
    for (int i = args->startRow; i < args->endRow; i++) // Loop through the rows assigned to this thread     
    { 
        for (int j = 0; j < N; j++)                     // Looping through each column of matrix B 
        { 
            (*args->C)[i][j] = 0; 
            for (int k = 0; k < N; k++)                 // Multiply corresponding elements of row i in A and column j in B 
            { 
                (*args->C)[i][j] += (*args->A)[i][k] * (*args->B)[k][j];  // Add the result to C[i][j] 
            } 
        } 
    } 
    // Thread completes its task 
    return nullptr;  
} 

int main() { 
    vector<vector<int>> A(N, vector<int>(N)); // 2D Matrix A 
    vector<vector<int>> B(N, vector<int>(N)); // 2D Matrix B 
    vector<vector<int>> C(N, vector<int>(N)); // Resultant Matrix C 

    srand(time(NULL)); // This ensures different random numbers each time the program runs. 

    // Fill matrices A and B with random integers between 0 and 999 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < N; j++) { 
            A[i][j] = rand() % 1000; 
            B[i][j] = rand() % 1000; 
        } 
    } 

    // Declare threads and thread arguments 
    pthread_t threads[NUM_THREADS];         // Array to hold thread IDs 
    ThreadArgs threadArgs[NUM_THREADS];     // Array to hold thread arguments 
    int rowsPerThread = N / NUM_THREADS;    // Calculate how many rows each thread should process 

    clock_t start = clock();                // Start the timer to measure how long the multiplication takes 

    // Create threads and assign work 
    for (int i = 0; i < NUM_THREADS; i++)  
    { 
        threadArgs[i].A = &A;           // Pass matrix A to the thread 
        threadArgs[i].B = &B;           // Pass matrix B to the thread 
        threadArgs[i].C = &C;           // Pass result matrix C to the thread 
        threadArgs[i].startRow = i * rowsPerThread; // Calculate the starting row for this thread 

        // Calculate the ending row for this thread 
        // If this is the last thread, assign it the remaining rows 
        threadArgs[i].endRow = (i == NUM_THREADS - 1) ? N : (i + 1) * rowsPerThread; 

        // Create the thread and pass the thread arguments 
        pthread_create(&threads[i], NULL, multiply, &threadArgs[i]); 
    } 

    // Waiting for all threads to finish 
    for (int i = 0; i < NUM_THREADS; i++)  
    { 
        pthread_join(threads[i], NULL); // Join the thread 
    } 

    // Calculate the time taken in seconds 
    double time_taken = (clock() - start) / (double)CLOCKS_PER_SEC; 
    cout << "Time taken: " << time_taken << " seconds\n"; 

    // Write the resultant matrix C to a file named "parallel.txt" 
    ofstream outputFile("parallel.txt"); 
    if (outputFile.is_open())  
    { 
        for (int i = 0; i < N; i++)  
        { 
            for (int j = 0; j < N; j++)  
            { 
                outputFile << C[i][j] << " ";   // Write each element to the file 
            } 
            outputFile << "\n"; 
        } 
        outputFile.close(); 
        cout << "The final result of matrix multiplication (C matrix) has been written to parallel.txt\n"; 
    }  
    else  
    { 
        cerr << "Unable to open file for writing.\n"; 
    } 

    return 0; 
}
